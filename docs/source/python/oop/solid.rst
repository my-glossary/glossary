=====
SOLID
=====

SRP — принцип единственной ответственности
==========================================

`SRP on Hexlet <https://ru.hexlet.io/courses/python-object-oriented-design/lessons/right-way-to-write-code/theory_unit>`_

   Создаем классы только когда нужно
   управлять состоянием или конфигурацией.

Важно помнить, что применение классов полезно тогда,
когда они помогают упростить работу с кодом.

   Главное основание для разделения ответственности
   – это не абстрактная единственная ответственность,
   а выделение чистого кода, который не связан с побочными эффектами.

.. code-block:: python
   :caption: Объектный интерфейс

   # класс DateTime используем для хранения времени

   from datetime import datetime

   class DateTime:
       def __init__(self, time=None):
           self.time = time

       def now(self)
           return self.__class__(datetime.now())

       def to_iso(self):
           return self.time.isoformat()

   datetime_instance = DateTime()
   print(datetime_instance.now().to_iso())  # => 2023-06-07T20:13:40.432+05:00

OCP — принцип открытости/закрытости
===================================

LSP — принцип подстановки Барбары Лисков
========================================

ISP — принцип разделения интерфейса
===================================

DIP — принцип инверсии зависимостей
===================================
